import requests
import json
import time
import io

# --- Configuration ---
# This should be the URL where your Rails API is running inside Docker.
BASE_URL = "http://localhost:5091/api"

# --- Helper Functions ---

def get_prerequisites():
    """Fetches necessary IDs from the API to create requests."""
    try:
        print("Fetching prerequisites (tunable models, clinician types)...")
        
        # Fetch a tunable AI model
        tunable_models_res = requests.get(f"{BASE_URL}/ai_models/tunable")
        tunable_models_res.raise_for_status()
        tunable_models = tunable_models_res.json()
        if not tunable_models:
            print("‚ùå Error: No tunable AI models found. Please seed your database.")
            return None, None, None
        ai_model = tunable_models[0]
        
        # Find a fine-tune task associated with that model
        model_details_res = requests.get(f"{BASE_URL}/ai_models/{ai_model['id']}")
        model_details_res.raise_for_status()
        model_details = model_details_res.json()
        if not model_details.get("fine_tune_tasks"):
            print(f"‚ùå Error: Model '{ai_model['name']}' has no fine-tune tasks. Please add one in the admin panel.")
            return None, None, None
        fine_tune_task = model_details["fine_tune_tasks"][0]

        # Fetch a clinician type
        clinician_types_res = requests.get(f"{BASE_URL}/clinician_types")
        clinician_types_res.raise_for_status()
        clinician_types = clinician_types_res.json()
        if not clinician_types:
            print("‚ùå Error: No clinician types found. Please seed your database.")
            return None, None, None
        clinician_type = clinician_types[0]
        
        print("‚úÖ Prerequisites fetched successfully.")
        return ai_model['id'], fine_tune_task['id'], clinician_type['id']

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching prerequisites: {e}")
        return None, None, None

def create_fine_tune_request(ai_model_id, fine_tune_task_id, clinician_type_id, model_name):
    """Simulates a user submitting a new fine-tune request."""
    print(f"\n- Submitting new request: '{model_name}'...")
    
    # Create an in-memory JSON file for the upload
    initial_data = [
        {"instruction": "i1", "input": "a1", "response": "b1"},
        {"instruction": "i2", "input": "a2", "response": "b2"}
    ]
    json_str = json.dumps(initial_data)
    file_obj = io.StringIO(json_str)
    file_obj.name = "simulation_data.json"

    files = {'file': (file_obj.name, file_obj, 'application/json')}
    
    payload = {
        'name': model_name,
        'description': f"Simulated request for status testing: {model_name}",
        'fine_tune_task_id': fine_tune_task_id,
        'clinician_type_id': clinician_type_id,
        'ai_model_id': ai_model_id,
        'fine_tuning_notes': "This is a simulated request generated by a script."
    }

    try:
        response = requests.post(f"{BASE_URL}/model_fine_tune_requests", data=payload, files=files)
        response.raise_for_status()
        request_data = response.json()
        print(f"  ‚úÖ Request created with ID: {request_data['id']}")
        return request_data['id']
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå Error creating request: {e.response.text}")
        return None

def formatting_callback(request_id, status, validated_dataset=None, error=None):
    """Simulates the formatting service sending a callback."""
    print(f"- Simulating formatting callback for request {request_id} with status '{status}'...")
    payload = {'id': request_id, 'status': status}
    if status == 'success' and validated_dataset:
        payload['validated_dataset'] = validated_dataset
    elif status == 'fail' and error:
        payload['error'] = error

    try:
        response = requests.post(f"{BASE_URL}/model_fine_tune_requests/formatting_complete", json=payload)
        response.raise_for_status()
        print(f"  ‚úÖ Formatting callback successful.")
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå Error sending formatting callback: {e.response.text}")

def confirm_request(request_id):
    """Simulates a user confirming the formatted data."""
    print(f"- Simulating user confirmation for request {request_id}...")
    try:
        url = f"{BASE_URL}/model_fine_tune_requests/{request_id}/confirm_and_start_fine_tune"
        response = requests.post(url)
        response.raise_for_status()
        print(f"  ‚úÖ Confirmation successful. Fine-tuning job queued.")
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå Error confirming request: {e.response.text}")

def fine_tuning_callback(request_id, status, adapter_path=None, error=None):
    """Simulates the fine-tuning service sending its final callback."""
    print(f"- Simulating fine-tuning callback for request {request_id} with status '{status}'...")
    payload = {'id': request_id, 'status': status}
    if status == 'success' and adapter_path:
        payload['adapter_path'] = adapter_path
    elif status == 'fail' and error:
        payload['error'] = error

    try:
        # Note: This uses the original 'update_status' endpoint as per the requirements
        response = requests.post(f"{BASE_URL}/model_fine_tune_requests/update_status", json=payload)
        response.raise_for_status()
        print(f"  ‚úÖ Fine-tuning callback successful.")
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå Error sending fine-tuning callback: {e.response.text}")

# --- Main Simulation Logic ---
if __name__ == "__main__":
    print("üöÄ Starting fine-tuning workflow simulation...")
    time.sleep(1)
    
    model_id, task_id, clinician_id = get_prerequisites()
    if not all([model_id, task_id, clinician_id]):
        print("üî¥ Simulation aborted due to missing prerequisites.")
    else:
        # 1. Create a request and leave it at 'waiting_for_formatting'
        create_fine_tune_request(model_id, task_id, clinician_id, "Model - Waiting for Formatting")
        time.sleep(2)

        # 2. Create a request that fails formatting
        req_id_format_fail = create_fine_tune_request(model_id, task_id, clinician_id, "Model - Formatting Failed")
        if req_id_format_fail:
            formatting_callback(req_id_format_fail, 'fail', error="Invalid data format found in column 'response' on line 42.")
        time.sleep(2)

        # 3. Create a request that is awaiting confirmation
        req_id_awaiting = create_fine_tune_request(model_id, task_id, clinician_id, "Model - Awaiting Confirmation")
        if req_id_awaiting:
            # Simulate the formatting logic as described
            formatted_data = [
                {"text": "### Instruction:i1### Input:a1### Response:b1"},
                {"text": "### Instruction:i2### Input:a2### Response:b2"}
            ]
            formatting_callback(req_id_awaiting, 'success', validated_dataset=formatted_data)
        time.sleep(2)

        # 4. Create a request and leave it at 'waiting_for_fine_tune'
        req_id_waiting_ft = create_fine_tune_request(model_id, task_id, clinician_id, "Model - Waiting for Fine Tune")
        if req_id_waiting_ft:
            formatted_data = [{"text": "### Instruction:i1### Input:a1### Response:b1"}]
            formatting_callback(req_id_waiting_ft, 'success', validated_dataset=formatted_data)
            time.sleep(1)
            confirm_request(req_id_waiting_ft)
        time.sleep(2)

        # 5. Create a request that fails during fine-tuning
        req_id_ft_fail = create_fine_tune_request(model_id, task_id, clinician_id, "Model - Fine-Tuning Failed")
        if req_id_ft_fail:
            formatted_data = [{"text": "### Instruction:i1### Input:a1### Response:b1"}]
            formatting_callback(req_id_ft_fail, 'success', validated_dataset=formatted_data)
            time.sleep(1)
            confirm_request(req_id_ft_fail)
            time.sleep(1)
            fine_tuning_callback(req_id_ft_fail, 'fail', error="CUDA out of memory during training epoch 3.")
        time.sleep(2)

        # 6. Create a request that completes successfully
        req_id_done = create_fine_tune_request(model_id, task_id, clinician_id, "Model - Done")
        if req_id_done:
            formatted_data = [{"text": "### Instruction:i1### Input:a1### Response:b1"}]
            formatting_callback(req_id_done, 'success', validated_dataset=formatted_data)
            time.sleep(1)
            confirm_request(req_id_done)
            time.sleep(1)
            fine_tuning_callback(req_id_done, 'success', adapter_path="/models/adapters/model-done-adapter-12345")
        
        print("\n\nüéâ Simulation complete! Check the Fine-Tune Status page.")
